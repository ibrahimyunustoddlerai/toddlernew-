[1mdiff --git a/DEPLOYMENT_GUIDE.md b/DEPLOYMENT_GUIDE.md[m
[1mindex d7d0ebe..06c0c75 100644[m
[1m--- a/DEPLOYMENT_GUIDE.md[m
[1m+++ b/DEPLOYMENT_GUIDE.md[m
[36m@@ -1,210 +1,205 @@[m
[31m-# üöÄ Vercel Deployment Guide for ToddlerChef AI[m
[32m+[m[32m# üöÄ Deployment Guide - ToddlerChef AI[m
 [m
[31m-## üìã Prerequisites[m
[32m+[m[32m## üìã **Overview**[m
[32m+[m[32mThis guide will help you deploy the improved meal planning features to your actual ToddlerChef AI app that's managed by GitHub and Vercel.[m
 [m
[31m-1. **OpenAI API Key** - Get from [platform.openai.com](https://platform.openai.com/api-keys)[m
[31m-2. **Vercel Account** - Sign up at [vercel.com](https://vercel.com)[m
[31m-3. **Node.js** - Download from [nodejs.org](https://nodejs.org)[m
[32m+[m[32m## üîß **Step 1: Prepare Your Changes**[m
 [m
[31m-## üõ†Ô∏è Quick Deployment (5 minutes)[m
[32m+[m[32m### **Files to Update/Create:**[m
[32m+[m[32m1. **`meal-planning.html`** - ‚úÖ Already updated with UX improvements[m
[32m+[m[32m2. **`auth.js`** - ‚úÖ Already updated with Firebase integration[m
[32m+[m[32m3. **`firebase-config.js`** - ‚úÖ Already updated with your Firebase config[m
[32m+[m[32m4. **`dashboard.html`** - ‚úÖ Already created[m
[32m+[m[32m5. **`signin.html`** - ‚úÖ Already updated[m
 [m
[31m-### **Step 1: Get Your OpenAI API Key**[m
[31m-```bash[m
[31m-# Go to https://platform.openai.com/api-keys[m
[31m-# Click "Create new secret key"[m
[31m-# Copy the key (starts with sk-...)[m
[31m-# Add billing info if you haven't already[m
[31m-```[m
[32m+[m[32m### **Key UX Improvements Made:**[m
[32m+[m[32m- ‚úÖ **Clear Instructions Banner** - Shows users exactly how to use the planner[m
[32m+[m[32m- ‚úÖ **Visual Feedback** - Selected meal slots are highlighted[m
[32m+[m[32m- ‚úÖ **Step-by-Step Guidance** - Instructions update as users progress[m
[32m+[m[32m- ‚úÖ **Enhanced Shopping List** - Quantity controls with +/- buttons[m
[32m+[m[32m- ‚úÖ **Better Visual Hierarchy** - Clearer layout and interactions[m
 [m
[31m-### **Step 2: Install Vercel CLI**[m
[31m-```bash[m
[31m-npm install -g vercel[m
[31m-```[m
[32m+[m[32m## üîÑ **Step 2: Git Workflow**[m
 [m
[31m-### **Step 3: Deploy to Vercel**[m
[32m+[m[32m### **Option A: If you have the actual repo locally**[m
 ```bash[m
[31m-# Navigate to your project folder[m
[31m-cd "C:\Users\Ibrahim\Desktop\Toddlerlunch.AI\Webflow and Cursor Collab\toddlerchefai"[m
[32m+[m[32m# Navigate to your actual ToddlerChef AI repository[m
[32m+[m[32mcd /path/to/your/actual/toddlerchef-ai-repo[m
 [m
[31m-# Install dependencies[m
[31m-npm install[m
[32m+[m[32m# Create a new branch for the meal planning feature[m
[32m+[m[32mgit checkout -b feature/meal-planning-ux-improvements[m
 [m
[31m-# Login to Vercel[m
[31m-vercel login[m
[32m+[m[32m# Copy the updated files from this development folder[m
[32m+[m[32mcp /path/to/this/dev/folder/meal-planning.html ./[m
[32m+[m[32mcp /path/to/this/dev/folder/auth.js ./[m
[32m+[m[32mcp /path/to/this/dev/folder/firebase-config.js ./[m
[32m+[m[32mcp /path/to/this/dev/folder/dashboard.html ./[m
[32m+[m[32mcp /path/to/this/dev/folder/signin.html ./[m
 [m
[31m-# Deploy (first time)[m
[31m-vercel[m
[32m+[m[32m# Add and commit the changes[m
[32m+[m[32mgit add .[m
[32m+[m[32mgit commit -m "feat: Add meal planning dashboard with improved UX[m
 [m
[31m-# Follow the prompts:[m
[31m-# - Set up and deploy? Y[m
[31m-# - Which scope? (choose your account)[m
[31m-# - Link to existing project? N  [m
[31m-# - Project name: toddlerchef-ai[m
[31m-# - Directory: ./ (current directory)[m
[31m-```[m
[32m+[m[32m- Add clear instructions banner for novice users[m
[32m+[m[32m- Implement visual feedback for meal slot selection[m
[32m+[m[32m- Add quantity controls to shopping list[m
[32m+[m[32m- Improve overall user experience and navigation[m
[32m+[m[32m- Integrate with Firebase authentication and storage"[m
 [m
[31m-### **Step 4: Add Environment Variable**[m
[31m-```bash[m
[31m-# After deployment, add your API key[m
[31m-vercel env add OPENAI_API_KEY[m
[32m+[m[32m# Push to GitHub[m
[32m+[m[32mgit push origin feature/meal-planning-ux-improvements[m
 [m
[31m-# Paste your OpenAI API key when prompted[m
[31m-# Select: Production, Preview, Development (all three)[m
[32m+[m[32m# Create a Pull Request on GitHub[m
[32m+[m[32m# Go to: https://github.com/your-username/toddlerchef-ai/pulls[m
 ```[m
 [m
[31m-### **Step 5: Redeploy with Environment Variable**[m
[32m+[m[32m### **Option B: If you need to clone the repo first**[m
 ```bash[m
[31m-vercel --prod[m
[32m+[m[32m# Clone your actual repository[m
[32m+[m[32mgit clone https://github.com/your-username/toddlerchef-ai.git[m
[32m+[m[32mcd toddlerchef-ai[m
[32m+[m
[32m+[m[32m# Follow the same steps as Option A[m
 ```[m
 [m
[31m-## üåê Alternative: Vercel Dashboard Method[m
[32m+[m[32m## üåê **Step 3: Vercel Deployment**[m
 [m
[31m-### **Option A: GitHub Integration (Recommended)**[m
[32m+[m[32m### **Automatic Deployment (Recommended)**[m
[32m+[m[32mIf your GitHub repo is connected to Vercel:[m
[32m+[m[32m1. **Push your changes** to GitHub (Step 2)[m
[32m+[m[32m2. **Vercel will automatically deploy** the new version[m
[32m+[m[32m3. **Check your Vercel dashboard** for deployment status[m
[32m+[m[32m4. **Test the live version** at your Vercel URL[m
 [m
[31m-1. **Push to GitHub:**[m
[31m-   ```bash[m
[31m-   git add .[m
[31m-   git commit -m "Add Vercel GPT integration"[m
[31m-   git push origin main[m
[31m-   ```[m
[32m+[m[32m### **Manual Deployment (If needed)**[m
[32m+[m[32m```bash[m
[32m+[m[32m# Install Vercel CLI if not already installed[m
[32m+[m[32mnpm install -g vercel[m
 [m
[31m-2. **Connect to Vercel:**[m
[31m-   - Go to [vercel.com/dashboard](https://vercel.com/dashboard)[m
[31m-   - Click "New Project"[m
[31m-   - Import your GitHub repository[m
[31m-   - Click "Deploy"[m
[32m+[m[32m# Login to Vercel[m
[32m+[m[32mvercel login[m
 [m
[31m-3. **Add Environment Variables:**[m
[31m-   - Go to Project Settings ‚Üí Environment Variables[m
[31m-   - Add: `OPENAI_API_KEY` = `your_key_here`[m
[31m-   - Select all environments (Production, Preview, Development)[m
[31m-   - Click "Save"[m
[32m+[m[32m# Deploy from your project directory[m
[32m+[m[32mvercel --prod[m
[32m+[m[32m```[m
 [m
[31m-4. **Redeploy:**[m
[31m-   - Go to Deployments tab[m
[31m-   - Click "Redeploy" on latest deployment[m
[32m+[m[32m## üß™ **Step 4: Testing Checklist**[m
 [m
[31m-### **Option B: Direct Upload**[m
[32m+[m[32m### **Before Deploying:**[m
[32m+[m[32m- [ ] **Local Testing** - All features work on `localhost:8000`[m
[32m+[m[32m- [ ] **Firebase Integration** - Authentication and data storage work[m
[32m+[m[32m- [ ] **Responsive Design** - Works on mobile and desktop[m
[32m+[m[32m- [ ] **Cross-browser Testing** - Chrome, Firefox, Safari, Edge[m
 [m
[31m-1. **Zip your project folder** (excluding node_modules)[m
[31m-2. **Go to Vercel Dashboard** ‚Üí "New Project"[m
[31m-3. **Drag and drop** your zip file[m
[31m-4. **Add environment variables** as above[m
[32m+[m[32m### **After Deploying:**[m
[32m+[m[32m- [ ] **Live Site Testing** - Test on your actual Vercel URL[m
[32m+[m[32m- [ ] **User Registration** - Create a new account[m
[32m+[m[32m- [ ] **Meal Planning** - Add recipes to calendar[m
[32m+[m[32m- [ ] **Shopping List** - Test quantity controls[m
[32m+[m[32m- [ ] **Data Persistence** - Save and reload meal plans[m
 [m
[31m-## üß™ Local Testing[m
[32m+[m[32m## üîß **Step 5: Environment Variables**[m
 [m
[31m-### **Test Locally Before Deploying:**[m
[31m-```bash[m
[31m-# Create local environment file[m
[31m-cp .env.example .env.local[m
[32m+[m[32m### **Vercel Environment Variables**[m
[32m+[m[32mMake sure these are set in your Vercel dashboard:[m
[32m+[m[32m```[m
[32m+[m[32mFIREBASE_API_KEY=your_firebase_api_key[m
[32m+[m[32mFIREBASE_AUTH_DOMAIN=your_firebase_auth_domain[m
[32m+[m[32mFIREBASE_PROJECT_ID=your_firebase_project_id[m
[32m+[m[32mFIREBASE_STORAGE_BUCKET=your_firebase_storage_bucket[m
[32m+[m[32mFIREBASE_MESSAGING_SENDER_ID=your_firebase_messaging_sender_id[m
[32m+[m[32mFIREBASE_APP_ID=your_firebase_app_id[m
[32m+[m[32mFIREBASE_MEASUREMENT_ID=your_firebase_measurement_id[m
[32m+[m[32m```[m
 [m
[31m-# Edit .env.local and add your OpenAI API key:[m
[31m-# OPENAI_API_KEY=sk-your-actual-key-here[m
[32m+[m[32m### **How to Set in Vercel:**[m
[32m+[m[32m1. Go to your Vercel dashboard[m
[32m+[m[32m2. Select your ToddlerChef AI project[m
[32m+[m[32m3. Go to **Settings** ‚Üí **Environment Variables**[m
[32m+[m[32m4. Add each variable with the values from your `firebase-config.js`[m
 [m
[31m-# Install dependencies[m
[31m-npm install[m
[32m+[m[32m## üéØ **Step 6: User Experience Validation**[m
 [m
[31m-# Start local development server[m
[31m-vercel dev[m
[32m+[m[32m### **Test with Real Users:**[m
[32m+[m[32m1. **Ask a friend/family member** to try the meal planner[m
[32m+[m[32m2. **Watch them use it** without giving instructions[m
[32m+[m[32m3. **Note any confusion** or hesitation points[m
[32m+[m[32m4. **Iterate based on feedback**[m
 [m
[31m-# Open http://localhost:3000 in your browser[m
[31m-# Test the recipe generation[m
[31m-```[m
[32m+[m[32m### **Key UX Metrics to Track:**[m
[32m+[m[32m- **Time to first meal plan** - How long to add first recipe[m
[32m+[m[32m- **Shopping list usage** - Do users interact with quantity controls?[m
[32m+[m[32m- **Save rate** - How many users save their meal plans?[m
[32m+[m[32m- **Return rate** - Do users come back to use it again?[m
 [m
[31m-## üîß Troubleshooting[m
[32m+[m[32m## üö® **Troubleshooting**[m
 [m
 ### **Common Issues:**[m
 [m
[31m-**‚ùå "OpenAI API Key not found"**[m
[32m+[m[32m**1. Firebase Connection Errors**[m
 ```bash[m
[31m-# Check environment variables are set:[m
[31m-vercel env ls[m
[31m-[m
[31m-# If missing, add it:[m
[31m-vercel env add OPENAI_API_KEY[m
[32m+[m[32m# Check if firebase-config.js has correct values[m
[32m+[m[32m# Verify environment variables in Vercel[m
[32m+[m[32m# Test Firebase connection in browser console[m
 ```[m
 [m
[31m-**‚ùå "CORS Error"**[m
[31m-- Check `vercel.json` headers are correctly set[m
[31m-- Ensure your domain is allowed[m
[31m-[m
[31m-**‚ùå "Function Timeout"**[m
[31m-- OpenAI API can be slow[m
[31m-- Increase timeout in `vercel.json` (max 30s on free plan)[m
[31m-[m
[31m-**‚ùå "Module not found: openai"**[m
[32m+[m[32m**2. Vercel Build Failures**[m
 ```bash[m
[31m-# Ensure dependencies are installed:[m
[31m-npm install openai[m
[31m-[m
[31m-# Redeploy:[m
[31m-vercel --prod[m
[32m+[m[32m# Check Vercel build logs[m
[32m+[m[32m# Ensure all files are committed[m
[32m+[m[32m# Verify file paths are correct[m
 ```[m
 [m
[31m-### **Testing Your Deployment:**[m
[31m-[m
[31m-1. **Check the API endpoint:**[m
[31m-   ```[m
[31m-   https://your-app.vercel.app/api/generate-recipe[m
[31m-   ```[m
[31m-[m
[31m-2. **Test with curl:**[m
[31m-   ```bash[m
[31m-   curl -X POST https://your-app.vercel.app/api/generate-recipe \[m
[31m-     -H "Content-Type: application/json" \[m
[31m-     -d '{[m
[31m-       "leftovers": "chicken, rice",[m
[31m-       "vegetables": "carrots",[m
[31m-       "dietary": ["halal"],[m
[31m-       "agerange": ["12-18 months"][m
[31m-     }'[m
[31m-   ```[m
[32m+[m[32m**3. Authentication Issues**[m
[32m+[m[32m```bash[m
[32m+[m[32m# Test Firebase Auth in browser[m
[32m+[m[32m# Check Firebase Console for errors[m
[32m+[m[32m# Verify auth domain settings[m
[32m+[m[32m```[m
 [m
[31m-3. **Check browser console** for any errors[m
[32m+[m[32m## üìà **Step 7: Post-Deployment**[m
 [m
[31m-## üí∞ Cost Management[m
[32m+[m[32m### **Monitor Performance:**[m
[32m+[m[32m- **Vercel Analytics** - Page views, performance[m
[32m+[m[32m- **Firebase Analytics** - User engagement[m
[32m+[m[32m- **Error Tracking** - Any JavaScript errors[m
 [m
[31m-### **Monitor Usage:**[m
[31m-- OpenAI Dashboard ‚Üí Usage[m
[31m-- Vercel Dashboard ‚Üí Analytics[m
[32m+[m[32m### **Gather Feedback:**[m
[32m+[m[32m- **User Surveys** - Ask for feedback on the meal planner[m
[32m+[m[32m- **Usage Analytics** - Track which features are most used[m
[32m+[m[32m- **A/B Testing** - Test different UX approaches[m
 [m
[31m-### **Set Spending Limits:**[m
[31m-- OpenAI ‚Üí Billing ‚Üí Usage limits[m
[31m-- Set monthly limit (e.g., $10)[m
[32m+[m[32m## üéâ **Success Criteria**[m
 [m
[31m-### **Optimize Costs:**[m
[31m-- Use `gpt-3.5-turbo` instead of `gpt-4` (10x cheaper)[m
[31m-- Add request rate limiting[m
[31m-- Cache common recipes[m
[32m+[m[32m### **UX Improvements Achieved:**[m
[32m+[m[32m- ‚úÖ **No thinking time required** - Users immediately understand how to use it[m
[32m+[m[32m- ‚úÖ **Clear visual feedback** - Selected states are obvious[m
[32m+[m[32m- ‚úÖ **Intuitive workflow** - Step-by-step guidance[m
[32m+[m[32m- ‚úÖ **Enhanced shopping list** - Quantity controls work seamlessly[m
 [m
[31m-## üîó Your Deployed URLs[m
[32m+[m[32m### **Technical Achievements:**[m
[32m+[m[32m- ‚úÖ **Firebase Integration** - Authentication and data storage[m
[32m+[m[32m- ‚úÖ **Responsive Design** - Works on all devices[m
[32m+[m[32m- ‚úÖ **Performance** - Fast loading and smooth interactions[m
[32m+[m[32m- ‚úÖ **Reliability** - Error handling and fallbacks[m
 [m
[31m-After deployment, you'll have:[m
[31m-- **Main Site:** `https://toddlerchef-ai.vercel.app`[m
[31m-- **API Endpoint:** `https://toddlerchef-ai.vercel.app/api/generate-recipe`[m
[32m+[m[32m## üîÑ **Next Steps**[m
 [m
[31m-## üöÄ Production Checklist[m
[32m+[m[32m### **Phase 2 Features to Consider:**[m
[32m+[m[32m1. **Nutritional Tracking** - Track macros and nutrients[m
[32m+[m[32m2. **Child Profiles** - Multiple children with different preferences[m
[32m+[m[32m3. **Recipe Import** - Import from other sources[m
[32m+[m[32m4. **Social Features** - Share meal plans with other parents[m
[32m+[m[32m5. **Premium Features** - Advanced analytics and unlimited recipes[m
 [m
[31m-- [ ] OpenAI API key added to Vercel environment variables[m
[31m-- [ ] Deployment successful (green checkmark)[m
[31m-- [ ] API endpoint returns valid JSON[m
[31m-- [ ] Frontend successfully calls API[m
[31m-- [ ] Fallback to local generation works[m
[31m-- [ ] CORS headers configured[m
[31m-- [ ] Usage monitoring set up[m
[31m-- [ ] Spending limits configured[m
[32m+[m[32m---[m
 [m
[31m-## üîÑ Updates & Redeployment[m
[32m+[m[32m## üìû **Need Help?**[m
 [m
[31m-```bash[m
[31m-# Make changes to your code[m
[31m-# Commit and push to GitHub (if using GitHub integration)[m
[31m-git add .[m
[31m-git commit -m "Update recipe generation"[m
[31m-git push[m
[31m-[m
[31m-# Or redeploy manually:[m
[31m-vercel --prod[m
[31m-```[m
[32m+[m[32mIf you encounter any issues during deployment:[m
[32m+[m[32m1. **Check the troubleshooting section** above[m
[32m+[m[32m2. **Review Vercel deployment logs**[m
[32m+[m[32m3. **Test Firebase connection** in browser console[m
[32m+[m[32m4. **Verify all environment variables** are set correctly[m
 [m
[31m-üéâ **That's it! Your ToddlerChef AI is now powered by GPT and running on Vercel!**[m
\ No newline at end of file[m
[32m+[m[32m**Remember:** The goal is to make meal planning so intuitive that parents can use it without any instructions or training! üéØ[m
\ No newline at end of file[m
[1mdiff --git a/auth.js b/auth.js[m
[1mindex 03d842f..a2d03c6 100644[m
[1m--- a/auth.js[m
[1m+++ b/auth.js[m
[36m@@ -1,202 +1,433 @@[m
[31m-// Authentication service module[m
[31m-import { [m
[31m-  createUserWithEmailAndPassword, [m
[31m-  signInWithEmailAndPassword, [m
[31m-  signOut, [m
[31m-  onAuthStateChanged,[m
[31m-  GoogleAuthProvider,[m
[31m-  signInWithPopup [m
[31m-} from 'firebase/auth';[m
[31m-import { [m
[31m-  doc, [m
[31m-  setDoc, [m
[31m-  getDoc, [m
[31m-  updateDoc, [m
[31m-  serverTimestamp [m
[31m-} from 'firebase/firestore';[m
[31m-import { auth, db } from './firebase-config.js';[m
[31m-[m
[31m-// Google Auth Provider[m
[31m-const googleProvider = new GoogleAuthProvider();[m
[31m-[m
[31m-// User state management[m
[31m-let currentUser = null;[m
[31m-let authStateCallbacks = [];[m
[31m-[m
[31m-// Listen for auth state changes[m
[31m-onAuthStateChanged(auth, (user) => {[m
[31m-  currentUser = user;[m
[31m-  authStateCallbacks.forEach(callback => callback(user));[m
[31m-});[m
[31m-[m
[31m-// Add auth state listener[m
[31m-export function onAuthStateChange(callback) {[m
[31m-  authStateCallbacks.push(callback);[m
[31m-  if (currentUser !== null) {[m
[31m-    callback(currentUser);[m
[31m-  }[m
[31m-}[m
[32m+[m[32m// ToddlerChef AI Authentication System[m
[32m+[m[32mclass ToddlerChefAuth {[m
[32m+[m[32m    constructor() {[m
[32m+[m[32m        this.auth = window.auth;[m
[32m+[m[32m        this.db = window.db;[m
[32m+[m[32m        this.currentUser = null;[m
[32m+[m[32m        this.userProfile = null;[m
[32m+[m[41m        [m
[32m+[m[32m        // Listen for auth state changes[m
[32m+[m[32m        this.auth.onAuthStateChanged((user) => {[m
[32m+[m[32m            this.currentUser = user;[m
[32m+[m[32m            if (user) {[m
[32m+[m[32m                this.loadUserProfile();[m
[32m+[m[32m                this.updateUIForAuthenticatedUser();[m
[32m+[m[32m            } else {[m
[32m+[m[32m                this.updateUIForUnauthenticatedUser();[m
[32m+[m[32m            }[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
 [m
[31m-// Get current user[m
[31m-export function getCurrentUser() {[m
[31m-  return currentUser;[m
[31m-}[m
[32m+[m[32m    // User Registration[m
[32m+[m[32m    async registerUser(email, password, userData) {[m
[32m+[m[32m        try {[m
[32m+[m[32m            const userCredential = await this.auth.createUserWithEmailAndPassword(email, password);[m
[32m+[m[32m            const user = userCredential.user;[m
[32m+[m[41m            [m
[32m+[m[32m            // Create user profile in Firestore[m
[32m+[m[32m            await this.createUserProfile(user.uid, userData);[m
[32m+[m[41m            [m
[32m+[m[32m            return { success: true, user };[m
[32m+[m[32m        } catch (error) {[m
[32m+[m[32m            console.error('Registration error:', error);[m
[32m+[m[32m            return { success: false, error: error.message };[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
 [m
[31m-// Check if user is authenticated[m
[31m-export function isAuthenticated() {[m
[31m-  return currentUser !== null;[m
[31m-}[m
[32m+[m[32m    // User Login[m
[32m+[m[32m    async loginUser(email, password) {[m
[32m+[m[32m        try {[m
[32m+[m[32m            const userCredential = await this.auth.signInWithEmailAndPassword(email, password);[m
[32m+[m[32m            return { success: true, user: userCredential.user };[m
[32m+[m[32m        } catch (error) {[m
[32m+[m[32m            console.error('Login error:', error);[m
[32m+[m[32m            return { success: false, error: error.message };[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
 [m
[31m-// Create user profile in Firestore[m
[31m-async function createUserProfile(user, additionalData = {}) {[m
[31m-  const userRef = doc(db, 'users', user.uid);[m
[31m-  const userDoc = await getDoc(userRef);[m
[31m-  [m
[31m-  if (!userDoc.exists()) {[m
[31m-    const { displayName, email } = user;[m
[31m-    const createdAt = serverTimestamp();[m
[31m-    [m
[31m-    try {[m
[31m-      await setDoc(